(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{320:function(e,r,a){"use strict";a.r(r);var t=a(13),n=Object(t.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"springcloud-二-注册中心eureka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springcloud-二-注册中心eureka"}},[e._v("#")]),e._v(" springcloud(二)：注册中心Eureka")]),e._v(" "),r("p",[e._v("Eureka是Netflix开源的一款提供服务注册和发现的产品，它提供了完整的Service Registry和Service Discovery实现。也是springcloud体系中最重要最核心的组件之一。")]),e._v(" "),r("p",[e._v("服务中心又称注册中心，管理各种服务功能包括服务的注册、发现、熔断、负载、降级等，比如dubbo admin后台的各种功能。")]),e._v(" "),r("h2",{attrs:{id:"案例实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#案例实践"}},[e._v("#")]),e._v(" 案例实践")]),e._v(" "),r("h3",{attrs:{id:"eureka-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka-server"}},[e._v("#")]),e._v(" Eureka Server")]),e._v(" "),r("p",[e._v("spring cloud已经帮我实现了服务注册中心，我们只需要很简单的几个步骤就可以完成。")]),e._v(" "),r("p",[e._v("1、pom中添加依赖")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.cloud</groupId>\n\t\t<artifactId>spring-cloud-starter-eureka-server</artifactId>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t<scope>test</scope>\n\t</dependency>\n</dependencies>\n")])])]),r("p",[e._v("2、添加启动代码中添加@EnableEurekaServer注解")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("@SpringBootApplication\n@EnableEurekaServer\npublic class SpringCloudEurekaApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringCloudEurekaApplication.class, args);\n\t}\n}\n")])])]),r("p",[e._v("3、配置文件")]),e._v(" "),r("p",[e._v("在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为，在application.properties添加以下配置：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring.application.name=spring-cloud-eureka\n\nserver.port=8000\neureka.client.register-with-eureka=false\neureka.client.fetch-registry=false\n\neureka.client.serviceUrl.defaultZone=http://localhost:${server.port}/eureka/\n")])])]),r("ul",[r("li",[e._v("eureka.client.register-with-eureka ：表示是否将自己注册到Eureka Server，默认为true。")]),e._v(" "),r("li",[e._v("eureka.client.fetch-registry ：表示是否从Eureka Server获取注册信息，默认为true。")]),e._v(" "),r("li",[e._v("eureka.client.serviceUrl.defaultZone ：设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是http://localhost:8761/eureka ；多个地址可使用 , 分隔。")])]),e._v(" "),r("h2",{attrs:{id:"集群"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[e._v("#")]),e._v(" 集群")]),e._v(" "),r("p",[e._v("注册中心这么关键的服务，如果是单点话，遇到故障就是毁灭性的。在一个分布式系统中，服务注册中心是最重要的基础部分，理应随时处于可以提供服务的状态。为了维持其可用性，使用集群是很好的解决方案。Eureka通过互相注册的方式来实现高可用的部署，所以我们只需要将Eureke Server配置其他可用的serviceUrl就能实现高可用部署。")]),e._v(" "),r("p",[e._v("双节点注册中心\n首次我们尝试一下双节点的注册中心的搭建。")]),e._v(" "),r("p",[e._v("1、创建application-peer1.properties，作为peer1服务中心的配置，并将serviceUrl指向peer2")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring.application.name=spring-cloud-eureka\nserver.port=8000\neureka.instance.hostname=peer1\n\neureka.client.serviceUrl.defaultZone=http://peer2:8001/eureka/\n")])])]),r("p",[e._v("2、创建application-peer2.properties，作为peer2服务中心的配置，并将serviceUrl指向peer1")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("spring.application.name=spring-cloud-eureka\nserver.port=8001\neureka.instance.hostname=peer2\n\neureka.client.serviceUrl.defaultZone=http://peer1:8000/eureka/\n")])])]),r("p",[e._v("3、host转换")]),e._v(" "),r("p",[e._v("在hosts文件中加入如下配置")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("127.0.0.1 peer1  \n127.0.0.1 peer2  \n")])])]),r("p",[e._v("4、打包启动")]),e._v(" "),r("p",[e._v("依次执行下面命令")]),e._v(" "),r("h3",{attrs:{id:"打包"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#打包"}},[e._v("#")]),e._v(" 打包")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("mvn clean package\n")])])]),r("h3",{attrs:{id:"分别以peer1和peeer2-配置信息启动eureka"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分别以peer1和peeer2-配置信息启动eureka"}},[e._v("#")]),e._v(" 分别以peer1和peeer2 配置信息启动eureka")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1\njava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2\n")])])]),r("p",[e._v("依次启动完成后，浏览器输入：http://localhost:8000/")]),e._v(" "),r("p",[e._v("根据图可以看出peer1的注册中心DS Replicas已经有了peer2的相关配置信息，并且出现在available-replicas中。我们手动停止peer2来观察，发现peer2就会移动到unavailable-replicas一栏中，表示peer2不可用。")]),e._v(" "),r("p",[e._v("到此双节点的配置已经完成。")]),e._v(" "),r("h3",{attrs:{id:"eureka集群使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#eureka集群使用"}},[e._v("#")]),e._v(" eureka集群使用")]),e._v(" "),r("p",[e._v("在生产中我们可能需要三台或者大于三台的注册中心来保证服务的稳定性，配置的原理其实都一样，将注册中心分别指向其它的注册中心。这里只介绍三台集群的配置情况，其实和双节点的注册中心类似，每台注册中心分别又指向其它两个节点即可，使用application.yml来配置。")]),e._v(" "),r("p",[e._v("application.yml配置详情如下：")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("---\nspring:\n  application:\n    name: spring-cloud-eureka\n  profiles: peer1\nserver:\n  port: 8000\neureka:\n  instance:\n    hostname: peer1\n  client:\n    serviceUrl:\n      defaultZone: http://peer2:8001/eureka/,http://peer3:8002/eureka/\n---\nspring:\n  application:\n    name: spring-cloud-eureka\n  profiles: peer2\nserver:\n  port: 8001\neureka:\n  instance:\n    hostname: peer2\n  client:\n    serviceUrl:\n      defaultZone: http://peer1:8000/eureka/,http://peer3:8002/eureka/\n---\nspring:\n  application:\n    name: spring-cloud-eureka\n  profiles: peer3\nserver:\n  port: 8002\neureka:\n  instance:\n    hostname: peer3\n  client:\n    serviceUrl:\n      defaultZone: http://peer1:8000/eureka/,http://peer2:8001/eureka/\n")])])]),r("p",[e._v("分别以peer1、peer2、peer3的配置参数启动eureka注册中心。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("java -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1\njava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2\njava -jar spring-cloud-eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer3\n")])])]),r("p",[e._v("依次启动完成后，浏览器输入：http://localhost:8000/")]),e._v(" "),r("p",[e._v("可以在peer1中看到了peer2、peer3的相关信息。至此eureka集群也已经完成了")])])}),[],!1,null,null,null);r.default=n.exports}}]);