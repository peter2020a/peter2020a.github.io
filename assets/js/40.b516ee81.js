(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{312:function(t,a,e){"use strict";e.r(a);var r=e(13),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"openresty-nginx-lua-测试用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openresty-nginx-lua-测试用例"}},[t._v("#")]),t._v(" OpenResty(Nginx+Lua)测试用例")]),t._v(" "),a("h2",{attrs:{id:"一丶nginx-lua-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一丶nginx-lua-api"}},[t._v("#")]),t._v(" 一丶Nginx Lua API")]),t._v(" "),a("p",[t._v("和一般的Web Server类似，我们需要接收请求、处理并输出响应。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("对于请求我们需要获取如请求参数、请求头、Body体等信息；\n\n对于处理就是调用相应的Lua代码即可；\n\n对于输出响应需要进行响应状态码、响应头和响应内容体的输出。\n")])])]),a("p",[t._v("因此我们从如上几个点出发即可。")]),t._v(" "),a("h3",{attrs:{id:"_1丶接收请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1丶接收请求"}},[t._v("#")]),t._v(" 1丶接收请求")]),t._v(" "),a("h4",{attrs:{id:"_1-example-conf配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-example-conf配置文件"}},[t._v("#")]),t._v(" （1）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location ~ /lua_request/(\\d+)/(\\d+) {  \n    #设置nginx变量  \n    set $a $1;   \n    set $b $host;  \n    default_type "text/html";  \n    #nginx内容处理  \n    content_by_lua_file /home/www/lua/test_request.lua;  \n    #内容体处理完成后调用  \n    echo_after_body "ngx.var.b $b";  \n} \n')])])]),a("h4",{attrs:{id:"_2-test-request-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-test-request-lua"}},[t._v("#")]),t._v(" （2）test_request.lua")]),t._v(" "),a("p",[t._v("针对下面的lua脚本并不是单纯的lua脚本，而是和Nginx集成之后的特有的一些语法，即下面的lua脚本用lua的IDE是没办法直接运行的，但是直接可以用lua的IDE运行的lua脚本是可以在Nginx中集成的lua环境中运行的。")]),t._v(" "),a("p",[t._v("如下方法处理一般的请求基本够用了。另外在读取post内容体时根据实际情况设置client_body_buffer_size和client_max_body_size来保证内容在内存而不是在文件中。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ngx.var ：nginx变量，如果要赋值如ngx.var.b = 2，此变量必须提前声明；另外对于nginx\nlocation中使用正则捕获的捕获组可以使用ngx.var[捕获组数字]获取；\n\nngx.req.get_headers：获取请求头，默认只获取前100，如果想要获取所以可以调用\n\nngx.req.get_headers(0)：获取带中划线的请求头时请使用如headers.user_agent这种方式；如果一个请求头有多个值，则返回的是table；\n\nngx.req.get_uri_args：获取url请求参数，其用法和get_headers类似；\n\nngx.req.get_post_args：获取post请求内容体，其用法和get_headers类似，但是必须提前调用\n\nngx.req.read_body()：来读取body体（也可以选择在nginx配置文件使用lua_need_request_body\non;开启读取body体，但是官方不推荐）；\n\nngx.req.raw_header：未解析的请求头字符串；\n\nngx.req.get_body_data：为解析的请求body体内容字符串。\n")])])]),a("p",[t._v("如上方法处理一般的请求基本够用了。另外在读取post内容体时根据实际情况设置client_body_buffer_size和client_max_body_size来保证内容在内存而不是在文件中。下面给出一个上述方法示例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('--nginx变量  \nlocal var = ngx.var  \nngx.say("ngx.var.a : ", var.a, "<br/>")  \nngx.say("ngx.var.b : ", var.b, "<br/>")  \nngx.say("ngx.var[2] : ", var[2], "<br/>")  \nngx.var.b = 2;  \n\nngx.say("<br/>")  \n\n--请求头  \nlocal headers = ngx.req.get_headers()  \nngx.say("headers begin", "<br/>")  \nngx.say("Host : ", headers["Host"], "<br/>")  \nngx.say("user-agent : ", headers["user-agent"], "<br/>")  \nngx.say("user-agent : ", headers.user_agent, "<br/>")  \nfor k,v in pairs(headers) do  \n    if type(v) == "table" then  \n        ngx.say(k, " : ", table.concat(v, ","), "<br/>")  \n    else  \n        ngx.say(k, " : ", v, "<br/>")  \n    end  \nend  \nngx.say("headers end", "<br/>")  \nngx.say("<br/>")  \n\n--get请求uri参数  \nngx.say("uri args begin", "<br/>")  \nlocal uri_args = ngx.req.get_uri_args()  \nfor k, v in pairs(uri_args) do  \n    if type(v) == "table" then  \n        ngx.say(k, " : ", table.concat(v, ", "), "<br/>")  \n    else  \n        ngx.say(k, ": ", v, "<br/>")  \n    end  \nend  \nngx.say("uri args end", "<br/>")  \nngx.say("<br/>")  \n\n--post请求参数  \nngx.req.read_body()  \nngx.say("post args begin", "<br/>")  \nlocal post_args = ngx.req.get_post_args()  \nfor k, v in pairs(post_args) do  \n    if type(v) == "table" then  \n        ngx.say(k, " : ", table.concat(v, ", "), "<br/>")  \n    else  \n        ngx.say(k, ": ", v, "<br/>")  \n    end  \nend  \nngx.say("post args end", "<br/>")  \nngx.say("<br/>")  \n\n--请求的http协议版本  \nngx.say("ngx.req.http_version : ", ngx.req.http_version(), "<br/>")  \n--请求方法  \nngx.say("ngx.req.get_method : ", ngx.req.get_method(), "<br/>")  \n--原始的请求头内容  \nngx.say("ngx.req.raw_header : ",  ngx.req.raw_header(), "<br/>")  \n--请求的body内容体  \nngx.say("ngx.req.get_body_data() : ", ngx.req.get_body_data(), "<br/>")  \nngx.say("<br/>")  \n')])])]),a("p",[t._v("使用如下脚本测试")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("wget --post-data 'a=1&b=2' 'http://127.0.0.1/lua_request/1/2?a=3&b=4' -O -  \n")])])]),a("h3",{attrs:{id:"_2丶响应输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2丶响应输出"}},[t._v("#")]),t._v(" 2丶响应输出")]),t._v(" "),a("h4",{attrs:{id:"_1-1-example-conf配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-example-conf配置文件"}},[t._v("#")]),t._v(" （1.1）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_response_1 {  \n    default_type "text/html";  \n    content_by_lua_file /home/www/lua/test_response_1.lua;  \n}  \n')])])]),a("h4",{attrs:{id:"_1-2-test-response-1-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-test-response-1-lua"}},[t._v("#")]),t._v(" （1.2）test_response_1.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('--写响应头  \nngx.header.a = "1"  \n--多个响应头可以使用table  \nngx.header.b = {"2", "3"}  \n--输出响应  \nngx.say("a", "b", "<br/>")  \nngx.print("c", "d", "<br/>")  \n--200状态码退出  \nreturn ngx.exit(200)\n')])])]),a("p",[t._v("ngx.header：输出响应头；")]),t._v(" "),a("p",[t._v("ngx.print：输出响应内容体；")]),t._v(" "),a("p",[t._v("ngx.say：通ngx.print，但是会最后输出一个换行符；")]),t._v(" "),a("p",[t._v("ngx.exit：指定状态码退出。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-example-conf配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-example-conf配置文件"}},[t._v("#")]),t._v(" （2.1）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_response_2 {  \n    default_type "text/html";  \n    content_by_lua_file /home/www/lua/test_response_2.lua;  \n}  \n')])])]),a("h4",{attrs:{id:"_2-2-test-response-2-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-test-response-2-lua"}},[t._v("#")]),t._v(" （2.2）test_response_2.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ngx.redirect("http://jd.com", 302)  \n')])])]),a("p",[t._v("ngx.redirect：重定向；")]),t._v(" "),a("p",[t._v("ngx.status=状态码，设置响应的状态码；ngx.resp.get_headers()获取设置的响应状态码；ngx.send_headers()发送响应状态码，当调用ngx.say/ngx.print时自动发送响应状态码；可以通过ngx.headers_sent=true判断是否发送了响应状态码。")]),t._v(" "),a("h3",{attrs:{id:"_3丶其他api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3丶其他api"}},[t._v("#")]),t._v(" 3丶其他API")]),t._v(" "),a("h4",{attrs:{id:"_1、example-conf配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、example-conf配置文件"}},[t._v("#")]),t._v(" 1、example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_other {  \n    default_type "text/html";  \n    content_by_lua_file /home/www/lua/test_other.lua;  \n}  \n')])])]),a("h4",{attrs:{id:"_2、test-other-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、test-other-lua"}},[t._v("#")]),t._v(" 2、test_other.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('--未经解码的请求uri  \nlocal request_uri = ngx.var.request_uri;  \nngx.say("request_uri : ", request_uri, "<br/>");  \n--解码  \nngx.say("decode request_uri : ", ngx.unescape_uri(request_uri), "<br/>");  \n--MD5  \nngx.say("ngx.md5 : ", ngx.md5("123"), "<br/>")  \n--http time  \nngx.say("ngx.http_time : ", ngx.http_time(ngx.time()), "<br/>")  \n')])])]),a("p",[t._v("ngx.escape_uri/ngx.unescape_uri ： uri编码解码；")]),t._v(" "),a("p",[t._v("ngx.encode_args/ngx.decode_args：参数编码解码；")]),t._v(" "),a("p",[t._v("ngx.encode_base64/ngx.decode_base64：BASE64编码解码；")]),t._v(" "),a("p",[t._v("ngx.re.match：nginx正则表达式匹配；")]),t._v(" "),a("h3",{attrs:{id:"_4丶nginx全局内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4丶nginx全局内存"}},[t._v("#")]),t._v(" 4丶Nginx全局内存")]),t._v(" "),a("p",[t._v("使用过如Java的朋友可能知道如Ehcache等这种进程内本地缓存，Nginx是一个Master进程多个Worker进程的工作方式，因此我们可能需要在多个Worker进程中共享数据，那么此时就可以使用ngx.shared.DICT来实现全局内存共享。")]),t._v(" "),a("h4",{attrs:{id:"_1-首先在nginx-conf的http部分分配内存大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-首先在nginx-conf的http部分分配内存大小"}},[t._v("#")]),t._v(" （1）首先在nginx.conf的http部分分配内存大小")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#共享全局变量，在所有worker间共享  \nlua_shared_dict shared_data 1m; \n")])])]),a("h4",{attrs:{id:"_2-example-conf配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-example-conf配置文件"}},[t._v("#")]),t._v(" （2）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_shared_dict {  \n    default_type "text/html";  \n    content_by_lua_file /home/www/lua/test_lua_shared_dict.lua;  \n}  \n')])])]),a("h4",{attrs:{id:"_3-test-lua-shared-dict-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-test-lua-shared-dict-lua"}},[t._v("#")]),t._v(" （3）test_lua_shared_dict.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('--1、获取全局共享内存变量  \nlocal shared_data = ngx.shared.shared_data  \n\n--2、获取字典值  \nlocal i = shared_data:get("i")  \nif not i then  \n    i = 1  \n    --3、惰性赋值  \n    shared_data:set("i", i)  \n    ngx.say("lazy set i ", i, "<br/>")  \nend  \n--递增  \ni = shared_data:incr("i", 1)  \nngx.say("i=", i, "<br/>")  \n')])])]),a("p",[t._v("到此基本的Nginx Lua API就学完了，对于请求处理和输出响应如上介绍的API完全够用了，更多API请参考官方文档："),a("a",{attrs:{href:"http://wiki.nginx.org/HttpLuaModule#ngx.shared.DICT",target:"_blank"}},[t._v("http://wiki.nginx.org/HttpLuaModule#ngx.shared.DICT")])]),t._v(" "),a("h2",{attrs:{id:"二丶nginx-lua模块指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二丶nginx-lua模块指令"}},[t._v("#")]),t._v(" 二丶Nginx Lua模块指令")]),t._v(" "),a("p",[t._v("Nginx共11个处理阶段，而相应的处理阶段是可以做插入式处理，即可插拔式架构；另外指令可以在http、server、server if、location、location if几个范围进行配置：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("所处处理阶段")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("使用范围")]),t._v(" "),a("th",[t._v("解释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("init_by_lua init_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("loading-config")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("http")]),t._v(" "),a("td",[t._v("nginx Master进程加载配置时执行；通常用于初始化全局配置/预加载Lua模块")])]),t._v(" "),a("tr",[a("td",[t._v("init_worker_by_lua init_worker_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("starting-worker")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("http")]),t._v(" "),a("td",[t._v("每个Nginx Worker进程启动时调用的计时器，如果Master进程不允许则只会在init_by_lua之后调用；通常用于定时拉取配置/数据，或者后端服务的健康检查")])]),t._v(" "),a("tr",[a("td",[t._v("set_by_lua set_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("rewrite")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("server,server if,location,location if")]),t._v(" "),a("td",[t._v("设置nginx变量，可以实现复杂的赋值逻辑；此处是阻塞的，Lua代码要做到非常快；")])]),t._v(" "),a("tr",[a("td",[t._v("rewrite_by_lua rewrite_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("rewrite tail")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("http,server,location,location if")]),t._v(" "),a("td",[t._v("rrewrite阶段处理，可以实现复杂的转发/重定向逻辑；")])]),t._v(" "),a("tr",[a("td",[t._v("access_by_lua access_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("access tail")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("http,server,location,location if")]),t._v(" "),a("td",[t._v("请求访问阶段处理，用于访问控制")])]),t._v(" "),a("tr",[a("td",[t._v("content_by_lua content_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("content")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("location，location if")]),t._v(" "),a("td",[t._v("内容处理器，接收请求处理并输出响应")])]),t._v(" "),a("tr",[a("td",[t._v("header_filter_by_lua header_filter_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("output-header-filter")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("http，server，location，location if")]),t._v(" "),a("td",[t._v("设置header和cookie")])]),t._v(" "),a("tr",[a("td",[t._v("body_filter_by_lua body_filter_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("output-body-filter")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("http，server，location，location if")]),t._v(" "),a("td",[t._v("对响应数据进行过滤，比如截断、替换。")])]),t._v(" "),a("tr",[a("td",[t._v("log_by_lua log_by_lua_file")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("log")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("http，server，location，location if")]),t._v(" "),a("td",[t._v("log阶段处理，比如记录访问量/统计平均响应时间")])])])]),t._v(" "),a("h3",{attrs:{id:"_1、init-by-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、init-by-lua"}},[t._v("#")]),t._v(" 1、init_by_lua")]),t._v(" "),a("p",[t._v("每次Nginx重新加载配置时执行，可以用它来完成一些耗时模块的加载，或者初始化一些全局配置；在Master进程创建Worker进程时，此指令中加载的全局变量会进行Copy-OnWrite，即会复制到所有全局变量到Worker进程。")]),t._v(" "),a("h4",{attrs:{id:"_1-nginx-conf配置文件中的http部分添加如下代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx-conf配置文件中的http部分添加如下代码"}},[t._v("#")]),t._v(" （1）nginx.conf配置文件中的http部分添加如下代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#共享全局变量，在所有worker间共享  \nlua_shared_dict shared_data 1m;  \n\ninit_by_lua_file /home/www/lua/init.lua; \n")])])]),a("h4",{attrs:{id:"_2-init-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-init-lua"}},[t._v("#")]),t._v(" （2）init.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("--初始化耗时的模块  \nlocal redis = require 'resty.redis'  \nlocal cjson = require 'cjson'  \n\n--全局变量，不推荐  \ncount = 1  \n\n--共享全局内存  \nlocal shared_data = ngx.shared.shared_data  \nshared_data:set(\"count\", 1)  \n")])])]),a("h4",{attrs:{id:"_3-test-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-test-lua"}},[t._v("#")]),t._v(" （3）test.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('count = count + 1  \nngx.say("global variable : ", count)  \nlocal shared_data = ngx.shared.shared_data  \nngx.say(", shared memory : ", shared_data:get("count"))  \nshared_data:incr("count", 1)  \nngx.say("hello world")  \n')])])]),a("p",[a("strong",[t._v("另外注意一定在生产环境开启lua_code_cache，否则每个请求都会创建Lua VM实例。")])]),t._v(" "),a("h3",{attrs:{id:"_2、init-worker-by-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、init-worker-by-lua"}},[t._v("#")]),t._v(" 2、init_worker_by_lua")]),t._v(" "),a("p",[t._v("用于启动一些定时任务，比如心跳检查，定时拉取服务器配置等等；此处的任务是跟Worker进程数量有关系的，比如有2个Worker进程那么就会启动两个完全一样的定时任务。")]),t._v(" "),a("h4",{attrs:{id:"_1-nginx-conf配置文件中的http部分添加如下代码-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx-conf配置文件中的http部分添加如下代码-2"}},[t._v("#")]),t._v(" （1）nginx.conf配置文件中的http部分添加如下代码")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("init_worker_by_lua_file /home/www/lua/init_worker.lua;  \n")])])]),a("h4",{attrs:{id:"_2-init-worker-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-init-worker-lua"}},[t._v("#")]),t._v(" （2）init_worker.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('local count = 0  \nlocal delayInSeconds = 3  \nlocal heartbeatCheck = nil  \n\nheartbeatCheck = function(args)  \n   count = count + 1  \n   ngx.log(ngx.ERR, "do check ", count)  \n\n   local ok, err = ngx.timer.at(delayInSeconds, heartbeatCheck)  \n\n   if not ok then  \n      ngx.log(ngx.ERR, "failed to startup heartbeart worker...", err)  \n   end  \nend  \n\nheartbeatCheck() \n')])])]),a("p",[t._v("ngx.timer.at：延时调用相应的回调方法；ngx.timer.at(秒单位延时，回调函数，回调函数的参数列表)；可以将延时设置为0即得到一个立即执行的任务，任务不会在当前请求中执行不会阻塞当前请求，而是在一个轻量级线程中执行。")]),t._v(" "),a("p",[t._v("另外根据实际情况设置如下指令")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("lua_max_pending_timers 1024; #最大等待任务数\n\nlua_max_running_timers 256; #最大同时运行任务数\n")])])]),a("h3",{attrs:{id:"_3、set-by-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、set-by-lua"}},[t._v("#")]),t._v(" 3、set_by_lua")]),t._v(" "),a("p",[t._v("设置nginx变量，我们用的set指令即使配合if指令也很难实现负责的赋值逻辑；")]),t._v(" "),a("h4",{attrs:{id:"_1-1-、example-conf配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-、example-conf配置文件"}},[t._v("#")]),t._v(" （1.1）、example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_set_1 {  \n    default_type "text/html";  \n    set_by_lua_file $num /usr/example/lua/test_set_1.lua;  \n    echo $num;  \n}  \n')])])]),a("p",[a("strong",[t._v("set_by_lua_file")]),t._v("：语法set_by_lua_file $var lua_file arg1 arg2…; 在lua代码中可以实现所有复杂的逻辑，但是要执行速度很快，不要阻塞；")]),t._v(" "),a("h4",{attrs:{id:"_1-2-test-set-1-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-test-set-1-lua"}},[t._v("#")]),t._v(" （1.2）test_set_1.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('local uri_args = ngx.req.get_uri_args()  \nlocal i = uri_args["i"] or 0  \nlocal j = uri_args["j"] or 0  \n\nreturn i + j \n')])])]),a("p",[t._v("得到请求参数进行相加然后返回。")]),t._v(" "),a("p",[t._v("访问如http://192.168.1.2/lua_set_1?i=1&j=10进行测试。 如果我们用纯set指令是无法实现的。")]),t._v(" "),a("p",[t._v("再举个实际例子，我们实际工作时经常涉及到网站改版，有时候需要新老并存，或者切一部分流量到新版")]),t._v(" "),a("h4",{attrs:{id:"_2-1-、首先在example-conf中使用map指令来映射host到指定nginx变量-方便我们测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-、首先在example-conf中使用map指令来映射host到指定nginx变量-方便我们测试"}},[t._v("#")]),t._v(" （2.1）、首先在example.conf中使用map指令来映射host到指定nginx变量，方便我们测试")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('############ 测试时使用的动态请求  \nmap $host $item_dynamic {  \n    default                     "0";  \n    item2014.jd.com            "1";  \n}  \n')])])]),a("p",[t._v("如绑定hosts")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("192.168.1.2 item.jd.com;\n\n192.168.1.2 item2014.jd.com;\n")])])]),a("p",[t._v("此时我们想访问item2014.jd.com时访问新版，那么我们可以简单的使用如")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if ($item_dynamic = "1") {  \n   proxy_pass http://new;  \n}  \nproxy_pass http://old;  \n')])])]),a("p",[t._v("但是我们想把商品编号为为8位(比如品类为图书的)没有改版完成，需要按照相应规则跳转到老版，但是其他的到新版；虽然使用if指令能实现，但是比较麻烦，基本需要这样")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('set jump "0";  \nif($item_dynamic = "1") {  \n    set $jump "1";  \n}  \nif(uri ~ "^/6[0-9]{7}.html") {  \n   set $jump "${jump}2";  \n}  \n#非强制访问新版，且访问指定范围的商品  \nif (jump == "02") {  \n   proxy_pass http://old;  \n}  \nproxy_pass http://new;  \n')])])]),a("p",[t._v("以上规则还是比较简单的，如果涉及到更复杂的多重if/else或嵌套if/else实现起来就更痛苦了，可能需要到后端去做了；此时我们就可以借助lua了：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('set_by_lua $to_book \'  \n     local ngx_match = ngx.re.match  \n     local var = ngx.var  \n     local skuId = var.skuId  \n     local r = var.item_dynamic ~= "1" and ngx.re.match(skuId, "^[0-9]{8}$")  \n     if r then return "1" else return "0" end;  \n\';  \nset_by_lua $to_mvd \'  \n     local ngx_match = ngx.re.match  \n     local var = ngx.var  \n     local skuId = var.skuId  \n     local r = var.item_dynamic ~= "1" and ngx.re.match(skuId, "^[0-9]{9}$")  \n     if r then return "1" else return "0" end;  \n\';  \n#自营图书  \nif ($to_book) {  \n    proxy_pass http://127.0.0.1/old_book/$skuId.html;  \n}  \n#自营音像  \nif ($to_mvd) {  \n    proxy_pass http://127.0.0.1/old_mvd/$skuId.html;  \n}  \n#默认  \nproxy_pass http://127.0.0.1/proxy/$skuId.html;  \n')])])]),a("h3",{attrs:{id:"_4丶rewrite-by-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4丶rewrite-by-lua"}},[t._v("#")]),t._v(" 4丶rewrite_by_lua")]),t._v(" "),a("p",[t._v("执行内部URL重写或者外部重定向，典型的如伪静态化的URL重写。其默认执行在rewrite处理阶段的最后。")]),t._v(" "),a("h4",{attrs:{id:"_1-1-example-conf配置文件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-example-conf配置文件-2"}},[t._v("#")]),t._v(" （1.1）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_rewrite_1 {  \n    default_type "text/html";  \n    rewrite_by_lua_file /usr/example/lua/test_rewrite_1.lua;  \n    echo "no rewrite";  \n}  \n')])])]),a("h4",{attrs:{id:"_1-2-test-rewrite-1-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-test-rewrite-1-lua"}},[t._v("#")]),t._v(" （1.2）test_rewrite_1.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if ngx.req.get_uri_args()["jump"] == "1" then  \n   return ngx.redirect("http://www.jd.com?jump=1", 302)  \nend  \n')])])]),a("p",[t._v("当我们请求http://192.168.1.2/lua_rewrite_1时发现没有跳转，而请求http://192.168.1.2/lua_rewrite_1?jump=1时发现跳转到京东首页了。 此处需要301/302跳转根据自己需求定义。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-example-conf配置文件-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-example-conf配置文件-2"}},[t._v("#")]),t._v(" （2.1）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_rewrite_2 {  \n    default_type "text/html";  \n    rewrite_by_lua_file /usr/example/lua/test_rewrite_2.lua;  \n    echo "rewrite2 uri : $uri, a : $arg_a";  \n}  \n')])])]),a("h4",{attrs:{id:"_2-2-test-rewrite-2-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-test-rewrite-2-lua"}},[t._v("#")]),t._v(" （2.2）test_rewrite_2.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if ngx.req.get_uri_args()["jump"] == "1" then  \n   ngx.req.set_uri("/lua_rewrite_3", false);  \n   ngx.req.set_uri("/lua_rewrite_4", false);  \n   ngx.req.set_uri_args({a = 1, b = 2});  \nend  \n')])])]),a("p",[a("strong",[t._v("ngx.req.set_uri(uri, false)：")])]),t._v(" "),a("p",[t._v("可以内部重写uri（可以带参数），等价于 "),a("code",[t._v("rewrite ^ /lua_rewrite_3")]),t._v("；\n通过配合if/else可以实现 "),a("code",[t._v("rewrite^ /lua_rewrite_3 break")]),t._v("；这种功能；此处两者都是location内部url重写，不会重新发起新的location匹配；")]),t._v(" "),a("p",[a("strong",[t._v("ngx.req.set_uri_args：")])]),t._v(" "),a("p",[t._v("重写请求参数，可以是字符串(a=1&b=2)也可以是table；")]),t._v(" "),a("p",[t._v("访问如http://192.168.1.2/lua_rewrite_2?jump=0时得到响应\nrewrite2 uri : /lua_rewrite_2, a :")]),t._v(" "),a("p",[t._v("访问如http://192.168.1.2/lua_rewrite_2?jump=1时得到响应\nrewrite2 uri : /lua_rewrite_4, a : 1")]),t._v(" "),a("h4",{attrs:{id:"_3-1-example-conf配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-example-conf配置文件"}},[t._v("#")]),t._v(" （3.1）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_rewrite_3 {  \n    default_type "text/html";  \n    rewrite_by_lua_file /usr/example/lua/test_rewrite_3.lua;  \n    echo "rewrite3 uri : $uri";  \n} \n')])])]),a("h4",{attrs:{id:"_3-2-test-rewrite-3-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-test-rewrite-3-lua"}},[t._v("#")]),t._v(" （3.2）test_rewrite_3.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if ngx.req.get_uri_args()["jump"] == "1" then  \n   ngx.req.set_uri("/lua_rewrite_4", true);  \n   ngx.log(ngx.ERR, "=========")  \n   ngx.req.set_uri_args({a = 1, b = 2});  \nend \n')])])]),a("p",[a("strong",[t._v("ngx.req.set_uri(uri, true)：")])]),t._v(" "),a("p",[t._v("可以内部重写uri，即会发起新的匹配location请求，等价于 "),a("code",[t._v("rewrite ^ /lua_rewrite_4 last")]),t._v("；\n此处看error log是看不到我们记录的log。")]),t._v(" "),a("p",[t._v("所以请求如http://192.168.1.2/lua_rewrite_3?jump=1会到新的location中得到响应，此处没有/lua_rewrite_4，所以匹配到/lua请求，得到类似如下的响应")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("global variable : 2 ,\nshared memory : 1\nhello world\n")])])]),a("p",[t._v("即")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("rewrite ^ /lua_rewrite_3; 等价于 ngx.req.set_uri(“/lua_rewrite_3”, false);\n\nrewrite ^ /lua_rewrite_3break; 等价于 ngx.req.set_uri(“/lua_rewrite_3”, false); 加if/else判断/break/return\n\nrewrite ^ /lua_rewrite_4 last; 等价于 ngx.req.set_uri(“/lua_rewrite_4”, true);\n")])])]),a("p",[t._v("注意，在使用rewrite_by_lua时，开启rewrite_log on;后也看不到相应的rewrite log。")]),t._v(" "),a("h3",{attrs:{id:"_5、access-by-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、access-by-lua"}},[t._v("#")]),t._v(" 5、access_by_lua")]),t._v(" "),a("p",[t._v("用于访问控制，比如我们只允许内网ip访问，可以使用如下形式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("allow     127.0.0.1;  \nallow     10.0.0.0/8;  \nallow     192.168.0.0/16;  \nallow     172.16.0.0/12;  \ndeny      all; \n")])])]),a("h4",{attrs:{id:"_1-1-example-conf配置文件-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-example-conf配置文件-3"}},[t._v("#")]),t._v(" （1.1）example.conf配置文件")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('location /lua_access {  \n    default_type "text/html";  \n    access_by_lua_file /usr/example/lua/test_access.lua;  \n    echo "access";  \n}  \n')])])]),a("h4",{attrs:{id:"_1-2-test-access-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-test-access-lua"}},[t._v("#")]),t._v(" （1.2）test_access.lua")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if ngx.req.get_uri_args()["token"] ~= "123" then  \n   return ngx.exit(403)  \nend  \n')])])]),a("p",[t._v("即如果访问如http://192.168.1.2/lua_access?token=234将得到403 Forbidden的响应。这样我们可以根据如cookie/用户token来决定是否有访问权限。")]),t._v(" "),a("h3",{attrs:{id:"_5、content-by-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、content-by-lua"}},[t._v("#")]),t._v(" 5、content_by_lua")]),t._v(" "),a("p",[t._v("此指令之前已经用过了，此处就不讲解了。")])])}),[],!1,null,null,null);a.default=n.exports}}]);