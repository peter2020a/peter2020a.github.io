(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{293:function(n,t,e){"use strict";e.r(t);var s=e(13),a=Object(s.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"gin框架使用案例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin框架使用案例"}},[n._v("#")]),n._v(" gin框架使用案例")]),n._v(" "),t("h2",{attrs:{id:"_1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[n._v("#")]),n._v(" 1. 介绍")]),n._v(" "),t("p",[n._v("Gin 是一个用 Golang编写的 高性能的web 框架, 由于http路由的优化，速度提高了近 40 倍。 Gin的特点就是封装优雅、API友好。")]),n._v(" "),t("p",[n._v("Gin的一些特性：")]),n._v(" "),t("p",[n._v("快速 基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。")]),n._v(" "),t("p",[n._v("支持中间件 传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。")]),n._v(" "),t("p",[n._v("Crash 处理 Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！")]),n._v(" "),t("p",[n._v("JSON 验证 Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。")]),n._v(" "),t("p",[n._v("路由组 更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。")]),n._v(" "),t("p",[n._v("错误管理 Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。")]),n._v(" "),t("p",[n._v("内置渲染 Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。")]),n._v(" "),t("p",[n._v("可扩展性 新建一个中间件非常简单。")]),n._v(" "),t("h2",{attrs:{id:"_2-安装包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装包"}},[n._v("#")]),n._v(" 2.安装包")]),n._v(" "),t("p",[n._v("提示：依赖 Go 1.6 及以上版本")]),n._v(" "),t("p",[n._v("下载并安装 gin")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("go get -u github.com/gin-gonic/gin\n")])])]),t("h2",{attrs:{id:"_3-一个简单http-server的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-一个简单http-server的例子"}},[n._v("#")]),n._v(" 3.一个简单http server的例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package main\n// 导入gin包\nimport "github.com/gin-gonic/gin"\n​\n// 入口函数\nfunc main() {\n    // 初始化一个http服务对象\n    r := gin.Default()\n        \n    // 设置一个get请求的路由，url为/ping, 处理函数（或者叫控制器函数）是一个闭包函数。\n    r.GET("/ping", func(c *gin.Context) {\n        // 通过请求上下文对象Context, 直接往客户端返回一个json\n        c.JSON(200, gin.H{\n            "message": "pong",\n        })\n    })\n    \n    r.Run() // 监听并在 0.0.0.0:8080 上启动服务\n}\n')])])]),t("p",[n._v("将代码保存至demo.go文件中，然后, 执行 "),t("code",[n._v("go run demo.go")]),n._v(" 命令来运行代码, 然后就可以通过"),t("code",[n._v("localhost:8080/ping")]),n._v(" 访问了。")]),n._v(" "),t("h2",{attrs:{id:"_4-项目结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-项目结构"}},[n._v("#")]),n._v(" 4.项目结构")]),n._v(" "),t("p",[n._v("实际项目业务功能和模块会很多，我们不可能把所有代码都写在一个go文件里面或者写在一个main入口函数里面；我们需要对项目结构做一些规划，方便维护代码以及扩展。")]),n._v(" "),t("p",[n._v("Gin框没有对项目结构做出限制，我们可以根据自己项目需要自行设计。")]),n._v(" "),t("p",[n._v("这里给出一个典型的MVC框架大致的项目结构的例子，大家可以参考下：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("├── conf                    #项目配置文件目录\n│   └── config.toml         #大家可以选择自己熟悉的配置文件管理工具包例如：toml、xml等等\n├── controllers             #控制器目录，按模块存放控制器（或者叫控制器函数），必要的时候可以继续划分子目录。\n│   ├── food.go\n│   └── user.go\n├── main.go                 #项目入口，这里负责Gin框架的初始化，注册路由信息，关联控制器函数等。\n├── models                  #模型目录，负责项目的数据存储部分，例如各个模块的Mysql表的读写模型。\n│   ├── food.go\n│   └── user.go\n├── static                  #静态资源目录，包括Js，css，jpg等等，可以通过Gin框架配置，直接让用户访问。\n│   ├── css\n│   ├── images\n│   └── js\n├── logs                    #日志文件目录，主要保存项目运行过程中产生的日志。\n└── views                   #视图模板目录，存放各个模块的视图模板，当然有些项目只有api，是不需要视图部分，可以忽略这个目录\n    └── index.html\n")])])]),t("h2",{attrs:{id:"_5-gin框架运行模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-gin框架运行模式"}},[n._v("#")]),n._v(" 5.Gin框架运行模式")]),n._v(" "),t("p",[n._v("为方便调试，Gin 框架在运行的时候默认是debug模式，在控制台默认会打印出很多调试日志，上线的时候我们需要关闭debug模式，改为release模式。")]),n._v(" "),t("p",[n._v("设置Gin框架运行模式：")]),n._v(" "),t("h3",{attrs:{id:"_5-1-通过环境变量设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-通过环境变量设置"}},[n._v("#")]),n._v(" 5.1.通过环境变量设置")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("export GIN_MODE=release\n")])])]),t("p",[n._v("GIN_MODE环境变量，可以设置为debug或者release")]),n._v(" "),t("h3",{attrs:{id:"_5-2-通过代码设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-通过代码设置"}},[n._v("#")]),n._v(" 5.2.通过代码设置")]),n._v(" "),t("p",[n._v("在main函数，初始化gin框架的时候执行下面代码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 设置 release模式\ngin.SetMode(gin.ReleaseMode)\n// 或者 设置debug模式\ngin.SetMode(gin.DebugMode)\n")])])]),t("h2",{attrs:{id:"gin路由与控制器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin路由与控制器"}},[n._v("#")]),n._v(" Gin路由与控制器")]),n._v(" "),t("h3",{attrs:{id:"_1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-概述"}},[n._v("#")]),n._v(" 1.概述")]),n._v(" "),t("p",[n._v("路由是一个过程，指的是一个http请求，如何找到对应的处理器函数（也可以叫控制器函数）,Gin框架的路由是基于httprouter包实现的。")]),n._v(" "),t("p",[n._v("控制器函数主要负责执行http请求-响应任务。")]),n._v(" "),t("p",[n._v("一个简单的例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('r := gin.Default()\n​\n// 路由定义post请求, url路径为：/user/login, 绑定doLogin控制器函数\nr.POST("/user/login", doLogin)\n​\n// 控制器函数\nfunc doLogin(c *gin.Context) {\n        // 获取post请求参数\n    username := c.PostForm("username")\n    password := c.PostForm("password")\n​\n    // 通过请求上下文对象Context, 直接往客户端返回一个字符串\n    c.String(200, "username=%s,password=%s", username,password)\n}\n')])])]),t("h3",{attrs:{id:"_2-路由规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-路由规则"}},[n._v("#")]),n._v(" 2.路由规则")]),n._v(" "),t("p",[n._v("一条路由规则由三部分组成：")]),n._v(" "),t("p",[n._v("http请求方法")]),n._v(" "),t("p",[n._v("url路径")]),n._v(" "),t("p",[n._v("控制器函数")]),n._v(" "),t("h4",{attrs:{id:"_1-http请求方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-http请求方法"}},[n._v("#")]),n._v(" 1.http请求方法")]),n._v(" "),t("p",[n._v("常用的http请求方法有下面4种:")]),n._v(" "),t("p",[n._v("GET")]),n._v(" "),t("p",[n._v("POST")]),n._v(" "),t("p",[n._v("PUT")]),n._v(" "),t("p",[n._v("DELETE")]),n._v(" "),t("h4",{attrs:{id:"_2-url路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-url路径"}},[n._v("#")]),n._v(" 2.url路径")]),n._v(" "),t("p",[n._v("echo框架，url路径有三种写法：")]),n._v(" "),t("p",[n._v("静态url路径")]),n._v(" "),t("p",[n._v("带路径参数的url路径")]),n._v(" "),t("p",[n._v("带星号（*）模糊匹配参数的url路径")]),n._v(" "),t("p",[n._v("下面看下各种url路由的例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 例子1， 静态Url路径, 即不带任何参数的url路径\n/users/center\n/user/111\n/food/12\n​\n// 例子2，带路径参数的url路径，url路径上面带有参数,参数由冒号（:）跟着一个字符串定义。\n// 路径参数值可以是数值，也可以是字符串\n​\n//定义参数:id， 可以匹配/user/1, /user/899 /user/xiaoli 这类Url路径\n/user/:id\n​\n//定义参数:id， 可以匹配/food/2, /food/100 /food/apple 这类Url路径\n/food/:id\n​\n//定义参数:type和:page， 可以匹配/foods/2/1, /food/100/25 /food/apple/30 这类Url路径\n/foods/:type/:page\n​\n// 例子3. 带星号（*）模糊匹配参数的url路径\n// 星号代表匹配任意路径的意思, 必须在*号后面指定一个参数名，后面可以通过这个参数获取*号匹配的内容。\n​\n//以/foods/ 开头的所有路径都匹配\n//匹配：/foods/1， /foods/200, /foods/1/20, /foods/apple/1 \n/foods/*path\n​\n//可以通过path参数获取*号匹配的内容。\n")])])]),t("h4",{attrs:{id:"_3-控制器函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-控制器函数"}},[n._v("#")]),n._v(" 3.控制器函数")]),n._v(" "),t("p",[n._v("控制器函数定义：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func HandlerFunc(c *gin.Context)\n")])])]),t("p",[n._v("控制器函数接受一个上下文参数。 可以通过上下文参数，获取http请求参数，响应http请求。")]),n._v(" "),t("h4",{attrs:{id:"_4-路由定义例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-路由定义例子"}},[n._v("#")]),n._v(" 4.路由定义例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('//实例化gin实例对象。\nr := gin.Default()\n    \n//定义post请求, url路径为：/users, 绑定saveUser控制器函数\nr.POST("/users", saveUser)\n​\n//定义get请求，url路径为：/users/:id  （:id是参数，例如: /users/10, 会匹配这个url模式），绑定getUser控制器函数\nr.GET("/users/:id", getUser)\n​\n//定义put请求\nr.PUT("/users/:id", updateUser)\n​\n//定义delete请求\nr.DELETE("/users/:id", deleteUser)\n​\n​\n//控制器函数实现\nfunc saveUser(c *gin.Context) {\n    ...忽略实现...\n}\n​\nfunc getUser(c *gin.Context) {\n    ...忽略实现...\n}\n​\nfunc updateUser(c *gin.Context) {\n    ...忽略实现...\n}\n​\nfunc deleteUser(c *gin.Context) {\n    ...忽略实现...\n}\n')])])]),t("p",[n._v("提示：实际项目开发中不要把路由定义和控制器函数都写在一个go文件，不方便维护，可以参考第一章的项目结构，规划自己的业务模块。")]),n._v(" "),t("h3",{attrs:{id:"_3-分组路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-分组路由"}},[n._v("#")]),n._v(" 3.分组路由")]),n._v(" "),t("p",[n._v("在做api开发的时候，如果要支持多个api版本，我们可以通过分组路由来实现api版本处理。")]),n._v(" "),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n    router := gin.Default()\n​\n    // 创建v1组\n    v1 := router.Group("/v1")\n    {\n                // 在v1这个分组下，注册路由\n        v1.POST("/login", loginEndpoint)\n        v1.POST("/submit", submitEndpoint)\n        v1.POST("/read", readEndpoint)\n    }\n​\n    // 创建v2组\n    v2 := router.Group("/v2")\n    {\n                // 在v2这个分组下，注册路由\n        v2.POST("/login", loginEndpoint)\n        v2.POST("/submit", submitEndpoint)\n        v2.POST("/read", readEndpoint)\n    }\n​\n    router.Run(":8080")\n}\n')])])]),t("p",[n._v("上面的例子将会注册下面的路由信息：")]),n._v(" "),t("p",[n._v("/v1/login")]),n._v(" "),t("p",[n._v("/v1/submit")]),n._v(" "),t("p",[n._v("/v1/read")]),n._v(" "),t("p",[n._v("/v2/login")]),n._v(" "),t("p",[n._v("/v2/submit")]),n._v(" "),t("p",[n._v("/v2/read")]),n._v(" "),t("p",[n._v("路由分组，其实就是设置了同一类路由的url前缀。")]),n._v(" "),t("h2",{attrs:{id:"gin如何处理请求参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin如何处理请求参数"}},[n._v("#")]),n._v(" Gin如何处理请求参数")]),n._v(" "),t("p",[n._v("本章介绍Gin框架获取请求参数的方式")]),n._v(" "),t("h3",{attrs:{id:"_1-获取get-请求参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-获取get-请求参数"}},[n._v("#")]),n._v(" 1.获取Get 请求参数")]),n._v(" "),t("p",[n._v("Get请求url例子："),t("code",[n._v("/path?id=1234&name=Manu&value=111")])]),n._v(" "),t("p",[n._v("获取Get请求参数的常用函数：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func (c *Context) Query(key string) string\n\nfunc (c *Context) DefaultQuery(key, defaultValue string) string\n\nfunc (c *Context) GetQuery(key string) (string, bool)\n")])])]),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func Handler(c *gin.Context) {\n    //获取name参数, 通过Query获取的参数值是String类型。\n    name := c.Query("name")\n​\n        //获取name参数, 跟Query函数的区别是，可以通过第二个参数设置默认值。\n        name := c.DefaultQuery("name", "tizi365")\n​\n    //获取id参数, 通过GetQuery获取的参数值也是String类型, \n    // 区别是GetQuery返回两个参数，第一个是参数值，第二个参数是参数是否存在的bool值，可以用来判断参数是否存在。\n    id, ok := c.GetQuery("id")\n        if !ok {\n       // 参数不存在\n    }\n}\n')])])]),t("p",[n._v("提示：GetQuery函数，判断参数是否存在的逻辑是，参数值为空，参数也算存在，只有没有提交参数，才算参数不存在。")]),n._v(" "),t("h3",{attrs:{id:"_2-获取post请求参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取post请求参数"}},[n._v("#")]),n._v(" 2.获取Post请求参数")]),n._v(" "),t("p",[n._v("获取Post请求参数的常用函数：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func (c *Context) PostForm(key string) string\n\nfunc (c *Context) DefaultPostForm(key, defaultValue string) string\n\nfunc (c *Context) GetPostForm(key string) (string, bool)\n")])])]),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func Handler(c *gin.Context) {\n    //获取name参数, 通过PostForm获取的参数值是String类型。\n    name := c.PostForm("name")\n​\n    // 跟PostForm的区别是可以通过第二个参数设置参数默认值\n    name := c.DefaultPostForm("name", "tizi365")\n​\n    //获取id参数, 通过GetPostForm获取的参数值也是String类型,\n    // 区别是GetPostForm返回两个参数，第一个是参数值，第二个参数是参数是否存在的bool值，可以用来判断参数是否存在。\n    id, ok := c.GetPostForm("id")\n    if !ok {\n        // 参数不存在\n    }\n}\n')])])]),t("h3",{attrs:{id:"_3-获取url路径参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-获取url路径参数"}},[n._v("#")]),n._v(" 3.获取URL路径参数")]),n._v(" "),t("p",[n._v("获取URL路径参数，指的是获取 /user/:id 这类型路由绑定的参数，这个例子绑定了一个参数id。")]),n._v(" "),t("p",[n._v("获取url路径参数常用函数：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func (c *Context) Param(key string) string\n")])])]),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('r := gin.Default()\n    \nr.GET("/user/:id", func(c *gin.Context) {\n    // 获取url参数id\n    id := c.Param("id")\n})\n')])])]),t("h3",{attrs:{id:"_4-将请求参数绑定到struct对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-将请求参数绑定到struct对象"}},[n._v("#")]),n._v(" 4.将请求参数绑定到struct对象")]),n._v(" "),t("p",[n._v("前面获取参数的方式都是一个个参数的读取，比较麻烦，Gin框架支持将请求参数自动绑定到一个struct对象，这种方式支持Get/Post请求，也支持http请求body内容为json/xml格式的参数。")]),n._v(" "),t("p",[n._v("例子：")]),n._v(" "),t("p",[n._v("下面例子是将请求参数绑定到User struct对象。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// User 结构体定义\ntype User struct {\n  Name  string `json:"name" form:"name"`\n  Email string `json:"email" form:"email"`\n}\n')])])]),t("p",[n._v("通过定义struct字段的标签，定义请求参数和struct字段的关系。 下面对User的Name字段的标签进行说明。")]),n._v(" "),t("p",[n._v("struct标签说明：")]),n._v(" "),t("p",[n._v('标签\t说明\njson:"name"\t数据格式为json格式，并且json字段名为name\nform:"name"\t表单参数名为name\n提示：你可以根据自己的需要选择支持的数据类型，例如需要支持json数据格式，可以这样定义字段标签: json:"name"')]),n._v(" "),t("p",[n._v("下面看下控制器代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('r.POST("/user/:id", func(c *gin.Context) {\n   // 初始化user struct\n   u := User{}\n   // 通过ShouldBind函数，将请求参数绑定到struct对象， 处理json请求代码是一样的。\n   // 如果是post请求则根据Content-Type判断，接收的是json数据，还是普通的http请求参数\n   if c.ShouldBind(&u) == nil {\n     // 绑定成功， 打印请求参数\n     log.Println(u.Name)\n     log.Println(u.Email)\n​\n    }\n    // http 请求返回一个字符串 \n    c.String(200, "Success")\n})\n')])])]),t("p",[n._v("提示：如果你通过http请求body传递json格式的请求参数，并且通过post请求的方式提交参数，则需要将Content-Type设置为application/json, 如果是xml格式的数据，则设置为application/xml")]),n._v(" "),t("h3",{attrs:{id:"_5-gin如何获取客户ip"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-gin如何获取客户ip"}},[n._v("#")]),n._v(" 5.Gin如何获取客户ip")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('r := gin.Default()\n    \nr.GET("/ip", func(c *gin.Context) {\n    // 获取用户IP\n    ip := c.ClientIP()\n})\n')])])]),t("h2",{attrs:{id:"gin处理请求结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin处理请求结果"}},[n._v("#")]),n._v(" Gin处理请求结果")]),n._v(" "),t("p",[n._v("本章介绍处理完http请求后如何响应请求，Gin框架支持以字符串、json、xml、文件等格式响应请求。")]),n._v(" "),t("p",[n._v("gin.Context上下文对象支持多种返回处理结果，下面分别介绍不同的响应方式。")]),n._v(" "),t("h3",{attrs:{id:"_1-以字符串方式响应请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-以字符串方式响应请求"}},[n._v("#")]),n._v(" 1.以字符串方式响应请求")]),n._v(" "),t("p",[n._v("通过String函数返回字符串。")]),n._v(" "),t("p",[n._v("函数定义：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func (c *Context) String(code int, format string, values ...interface{})\n")])])]),t("p",[n._v("参数说明：")]),n._v(" "),t("p",[n._v("参数\t说明\ncode\thttp状态码\nformat\t返回结果，支持类似Sprintf函数一样的字符串格式定义，例如,%d 代表插入整数，%s代表插入字符串\nvalues\t任意个format参数定义的字符串格式参数\n例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func Handler(c *gin.Context)  {\n    // 例子1：\n    c.String(200, "欢迎访问tizi360.com!")\n    \n    // 例子2： 这里定义了两个字符串参数（两个%s），后面传入的两个字符串参数将会替换对应的%s\n    c.String(200,"欢迎访问%s, 你是%s", "tizi360.com!","最靓的仔！")\n}\n')])])]),t("p",[n._v("提示： net/http包定义了多种常用的状态码常量，例如：http.StatusOK == 200， http.StatusMovedPermanently == 301， http.StatusNotFound == 404等，具体可以参考net/http包")]),n._v(" "),t("h3",{attrs:{id:"_2-以json格式响应请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-以json格式响应请求"}},[n._v("#")]),n._v(" 2.以json格式响应请求")]),n._v(" "),t("p",[n._v("我们开发api接口的时候常用的格式就是json，下面是返回json格式数据的例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// User 定义\ntype User struct {\n  Name  string `json:"name"` // 通过json标签定义struct字段转换成json字段的名字。\n  Email string `json:"email"`\n}\n​\n// Handler 控制器\nfunc(c *gin.Context) {\n  //初始化user对象\n  u := &User{\n    Name:  "tizi365",\n    Email: "tizi@tizi365.com",\n  }\n  //返回json数据\n  //返回结果：{"name":"tizi365", "email":"tizi@tizi365.com"}\n  c.JSON(200, u)\n}\n')])])]),t("h3",{attrs:{id:"_3-以xml格式响应请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-以xml格式响应请求"}},[n._v("#")]),n._v(" 3.以xml格式响应请求")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// User 定义, 默认struct的名字就是xml的根节点名字，这里转换成xml后根节点的名字为User.\ntype User struct {\n  Name  string `xml:"name"` // 通过xml标签定义struct字段转换成xml字段的名字。\n  Email string `xml:"email"`\n}\n​\n// Handler 控制器\nfunc(c *gin.Context) {\n  //初始化user对象\n  u := &User{\n    Name:  "tizi365",\n    Email: "tizi@tizi365.com",\n  }\n  //返回xml数据\n  //返回结果：\n  //  <?xml version="1.0" encoding="UTF-8"?>\n  //  <User><name>tizi365</name><email>tizi@tizi365.com</email></User>\n  c.XML(200, u)\n}\n')])])]),t("h3",{attrs:{id:"_4-以文件格式响应请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-以文件格式响应请求"}},[n._v("#")]),n._v(" 4.以文件格式响应请求")]),n._v(" "),t("p",[n._v("下面介绍gin框架如何直接返回一个文件，可以用来做文件下载。")]),n._v(" "),t("p",[n._v("例子1：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func(c *gin.Context) {\n  //通过File函数，直接返回本地文件，参数为本地文件地址。\n  //函数说明：c.File("文件路径")\n  c.File("/var/www/1.jpg")\n}\n')])])]),t("p",[n._v("​\n例子2：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func(c *gin.Context) {\n  //通过FileAttachment函数，返回本地文件，类似File函数，区别是可以指定下载的文件名。\n  //函数说明: c.FileAttachment("文件路径", "下载的文件名")\n  c.FileAttachment("/var/www/1.jpg", "1.jpg")\n}\n')])])]),t("h3",{attrs:{id:"_5-设置http响应头-设置header"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-设置http响应头-设置header"}},[n._v("#")]),n._v(" 5.设置http响应头（设置Header）")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func(c *gin.Context) {\n  //设置http响应 header, key/value方式，支持设置多个header\n  c.Header("site","tizi365")\n}\n')])])]),t("h2",{attrs:{id:"gin框架-html模板处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin框架-html模板处理"}},[n._v("#")]),n._v(" Gin框架 html模板处理")]),n._v(" "),t("p",[n._v("Gin 框架默认封装了golang内置的html/template包用于处理html模版，如果你开发的是接口服务，不提供html页面可以跳过本章内容。")]),n._v(" "),t("p",[n._v("前置技术知识点：")]),n._v(" "),t("p",[n._v("模板引擎 - 点击Go模板引擎教程，学习完整的模板引擎语法。")]),n._v(" "),t("h3",{attrs:{id:"_1-返回html结果的例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-返回html结果的例子"}},[n._v("#")]),n._v(" 1.返回html结果的例子")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n        // 初始化gin对象\n    router := gin.Default()\n        // 首先加载templates目录下面的所有模版文件，模版文件扩展名随意\n    router.LoadHTMLGlob("templates/*")\n​\n        // 绑定一个url路由 /index\n    router.GET("/index", func(c *gin.Context) {\n                // 通过HTML函数返回html代码\n                // 第二个参数是模版文件名字\n                // 第三个参数是map类型，代表模版参数\n                // gin.H 是map[string]interface{}类型的别名\n        c.HTML(http.StatusOK, "index.html", gin.H{\n            "title": "Main website",\n        })\n    })\n        // 启动http服务，并且绑定在8080端口\n    router.Run(":8080")\n}\n')])])]),t("p",[n._v("模版代码")]),n._v(" "),t("p",[n._v("文件名：templates/index.html")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("<html>\n    <h1>\n        {{ .title }}\n    </h1>\n</html>\n")])])]),t("h3",{attrs:{id:"_2-处理模版子目录的情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-处理模版子目录的情况"}},[n._v("#")]),n._v(" 2.处理模版子目录的情况")]),n._v(" "),t("p",[n._v("一般在项目中，因为有多个模块的模版文件，我们都会以多个子目录的方式来组织模版文件，上面的例子只能加载某个目录下面的模版文件，无法加载子目录的模版文件。")]),n._v(" "),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n    router := gin.Default()\n        // 加载templates目录下面的所有模版文件，包括子目录\n       // **/* 代表所有子目录下的所有文件\n    router.LoadHTMLGlob("templates/**/*")\n​\n    router.GET("/posts/index", func(c *gin.Context) {\n                // 子目录的模版文件，需要加上目录名，例如：posts/index.tmpl\n        c.HTML(http.StatusOK, "posts/index.tmpl", gin.H{\n            "title": "Posts",\n        })\n    })\n    router.GET("/users/index", func(c *gin.Context) {\n                // 子目录的模版文件，需要加上目录名，例如：users/index.tmpl\n        c.HTML(http.StatusOK, "users/index.tmpl", gin.H{\n            "title": "Users",\n        })\n    })\n    router.Run(":8080")\n}\n')])])]),t("p",[n._v("模版文件：templates/posts/index.tmpl")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('{{ define "posts/index.tmpl" }}\n<html><h1>\n    {{ .title }}\n</h1>\n<p>Using posts/index.tmpl</p>\n</html>\n{{ end }}\n模版文件：templates/users/index.tmpl\n\n{{ define "users/index.tmpl" }}\n<html><h1>\n    {{ .title }}\n</h1>\n<p>Using users/index.tmpl</p>\n</html>\n{{ end }}\n')])])]),t("h2",{attrs:{id:"gin框架如何访问静态资源文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin框架如何访问静态资源文件"}},[n._v("#")]),n._v(" Gin框架如何访问静态资源文件")]),n._v(" "),t("p",[n._v("如果项目中包含js、css、jpg之类的静态文件，怎么访问访问静态文件？")]),n._v(" "),t("p",[n._v("下面例子介绍如何处理访问静态资源文件：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n    router := gin.Default()\n        // 设置静态资源文件目录，并且绑定一个Url前缀\n        // 静态资源文件目录：/var/www/tizi365/assets\n        // /assets是访问静态资源的url前缀\n        // 例如：\n        //   /assets/images/1.jpg 这个url文件，存储在/var/www/tizi365/assets/images/1.jpg\n    router.Static("/assets", "/var/www/tizi365/assets")\n​\n        // 为单个静态资源文件，绑定url\n        // 这里的意思就是将/favicon.ico这个url，绑定到./resources/favicon.ico这个文件\n    router.StaticFile("/favicon.ico", "./resources/favicon.ico")\n​\n    // Listen and serve on 0.0.0.0:8080\n    router.Run(":8080")\n}\n')])])]),t("p",[n._v("提示：设置/favicon.ico这个url，其实就是为网站设置图标，浏览器默认会将这个url作为网站默认图标。")]),n._v(" "),t("h2",{attrs:{id:"gin框架如何处理cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin框架如何处理cookie"}},[n._v("#")]),n._v(" Gin框架如何处理cookie")]),n._v(" "),t("p",[n._v("cookie通常用于在浏览器中保存一些小数据，例如客户标识、用户非铭感数据。注意别使用cookie保存隐私数据。")]),n._v(" "),t("p",[n._v("gin框架主要通过上下文对象提供的SetCookie和Cookie两个函数操作cookie")]),n._v(" "),t("h3",{attrs:{id:"_1-设置cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-设置cookie"}},[n._v("#")]),n._v(" 1.设置cookie")]),n._v(" "),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('import (\n    "fmt"\n​\n    "github.com/gin-gonic/gin"\n)\n​\nfunc main() {\n​\n    router := gin.Default()\n​\n    router.GET("/cookie", func(c *gin.Context) {\n       // 设置cookie\n       c.SetCookie("site_cookie", "cookievalue", 3600, "/", "localhost", false, true)\n    })\n​\n    router.Run()\n')])])]),t("p",[n._v("SetCookie函数定义：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func (c *Context) SetCookie(name, value string, maxAge int, path, domain string, secure, httpOnly bool)\n参数说明：\n\n参数名\t类型\t说明\nname\tstring\tcookie名字\nvalue\tstring\tcookie值\nmaxAge\tint\t有效时间，单位是秒，MaxAge=0 忽略MaxAge属性，MaxAge<0 相当于删除cookie, 通常可以设置-1代表删除，MaxAge>0 多少秒后cookie失效\npath\tstring\tcookie路径\ndomain\tstring\tcookie作用域\nsecure\tbool\tSecure=true，那么这个cookie只能用https协议发送给服务器\nhttpOnly\tbool\t设置HttpOnly=true的cookie不能被js获取到\n")])])]),t("h3",{attrs:{id:"_2-读取cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-读取cookie"}},[n._v("#")]),n._v(" 2.读取cookie")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func Handler(c *gin.Context) {\n      // 根据cookie名字读取cookie值\n      data, err := c.Cookie("site_cookie")\n      if err != nil {\n     // 直接返回cookie值\n     c.String(200,data)\n     return\n      }\n      c.String(200,"not found!")\n}\n')])])]),t("h3",{attrs:{id:"_3-删除coolie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-删除coolie"}},[n._v("#")]),n._v(" 3.删除coolie")]),n._v(" "),t("p",[n._v("通过将cookie的MaxAge设置为-1, 达到删除cookie的目的。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func Handler(c *gin.Context) {\n      // 设置cookie  MaxAge设置为-1，表示删除cookie\n       c.SetCookie("site_cookie", "cookievalue", -1, "/", "localhost", false, true)\n      c.String(200,"删除cookie演示")\n}\n')])])]),t("h2",{attrs:{id:"gin框架实现文件上传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin框架实现文件上传"}},[n._v("#")]),n._v(" Gin框架实现文件上传")]),n._v(" "),t("p",[n._v("后端代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package main\n// 导入gin包\nimport (\n    "fmt"\n    "github.com/gin-gonic/gin"\n    "log"\n    "net/http"\n)\n​\nfunc main() {\n    router := gin.Default()\n    // 设置文件上传大小限制，默认是32m\n    router.MaxMultipartMemory = 64 << 20  // 64 MiB\n​\n    router.POST("/upload", func(c *gin.Context) {\n        // 获取上传文件，返回的是multipart.FileHeader对象，代表一个文件，里面包含了文件名之类的详细信息\n        // file是表单字段名字\n        file, _ := c.FormFile("file")\n        // 打印上传的文件名\n        log.Println(file.Filename)\n​\n        // 将上传的文件，保存到./data/1111.jpg 文件中\n        c.SaveUploadedFile(file, "./data/1111.jpg")\n​\n        c.String(http.StatusOK, fmt.Sprintf("\'%s\' uploaded!", file.Filename))\n    })\n    router.Run(":8080")\n}\nhtml代码：\n\n<!doctype html>\n<html lang="en">\n<head>\n    <meta charset="utf-8">\n    <title>Single file upload</title>\n</head>\n<body>\n<h1>上传文件演示</h1>\n​\n<form action="/upload" method="post" enctype="multipart/form-data">\n    文件: <input type="file" name="file"><br><br>\n    <input type="submit" value="上传文件">\n</form>\n</body>\n</html>\n')])])]),t("h2",{attrs:{id:"gin框架中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin框架中间件"}},[n._v("#")]),n._v(" Gin框架中间件")]),n._v(" "),t("p",[n._v("在Gin框架中，中间件（Middleware）指的是可以拦截http请求-响应生命周期的特殊函数，在请求-响应生命周期中可以注册多个中间件，每个中间件执行不同的功能，一个中间执行完再轮到下一个中间件执行。")]),n._v(" "),t("h3",{attrs:{id:"中间件的常见应用场景如下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件的常见应用场景如下"}},[n._v("#")]),n._v(" 中间件的常见应用场景如下：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("请求限速")])]),n._v(" "),t("li",[t("p",[n._v("api接口签名处理")])]),n._v(" "),t("li",[t("p",[n._v("权限校验")])]),n._v(" "),t("li",[t("p",[n._v("统一错误处理")])])]),n._v(" "),t("p",[n._v("提示：如果你想拦截所有请求做一些事情都可以开发一个中间件函数去实现。")]),n._v(" "),t("p",[n._v("Gin支持设置全局中间件和针对路由分组设置中间件，设置全局中间件意思就是会拦截所有请求，针对分组路由设置中间件，意思就是仅对这个分组下的路由起作用。")]),n._v(" "),t("h4",{attrs:{id:"_1-使用中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用中间件"}},[n._v("#")]),n._v(" 1.使用中间件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func main() {\n    r := gin.New()\n​\n    // 通过use设置全局中间件\n​\n    // 设置日志中间件，主要用于打印请求日志\n    r.Use(gin.Logger())\n​\n    // 设置Recovery中间件，主要用于拦截paic错误，不至于导致进程崩掉\n    r.Use(gin.Recovery())\n​\n    // 忽略后面代码\n}\n")])])]),t("h4",{attrs:{id:"_2-自定义中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义中间件"}},[n._v("#")]),n._v(" 2.自定义中间件")]),n._v(" "),t("p",[n._v("下面通过一个例子，了解如果自定义一个中间件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package main\n// 导入gin包\nimport (\n"github.com/gin-gonic/gin"\n    "log"\n    "time"\n)\n​\n// 自定义个日志中间件\nfunc Logger() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        t := time.Now()\n​\n        // 可以通过上下文对象，设置一些依附在上下文对象里面的键/值数据\n        c.Set("example", "12345")\n​\n        // 在这里处理请求到达控制器函数之前的逻辑\n     \n        // 调用下一个中间件，或者控制器处理函数，具体得看注册了多少个中间件。\n        c.Next()\n​\n        // 在这里可以处理请求返回给用户之前的逻辑\n        latency := time.Since(t)\n        log.Print(latency)\n​\n        // 例如，查询请求状态吗\n        status := c.Writer.Status()\n        log.Println(status)\n    }\n}\n​\nfunc main() {\n    r := gin.New()\n    // 注册上面自定义的日志中间件\n    r.Use(Logger())\n​\n    r.GET("/test", func(c *gin.Context) {\n        // 查询我们之前在日志中间件，注入的键值数据\n        example := c.MustGet("example").(string)\n​\n        // it would print: "12345"\n        log.Println(example)\n    })\n​\n    // Listen and serve on 0.0.0.0:8080\n    r.Run(":8080")\n}\n')])])]),t("h2",{attrs:{id:"gin框架如何处理session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gin框架如何处理session"}},[n._v("#")]),n._v(" Gin框架如何处理session")]),n._v(" "),t("p",[n._v("在Gin框架中，我们可以依赖gin-contrib/sessions中间件处理session。")]),n._v(" "),t("p",[n._v("gin-contrib/sessions中间件支持的存储引擎：")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("cookie")])]),n._v(" "),t("li",[t("p",[n._v("memstore")])]),n._v(" "),t("li",[t("p",[n._v("redis")])]),n._v(" "),t("li",[t("p",[n._v("memcached")])]),n._v(" "),t("li",[t("p",[n._v("mongodb")])])]),n._v(" "),t("p",[n._v("下面介绍session的用法")]),n._v(" "),t("h3",{attrs:{id:"_1-安装session包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装session包"}},[n._v("#")]),n._v(" 1.安装session包")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("go get github.com/gin-contrib/sessions\n")])])]),t("h3",{attrs:{id:"_2-基本的session用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本的session用法"}},[n._v("#")]),n._v(" 2.基本的session用法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package main\n​\nimport (\n        // 导入session包\n    "github.com/gin-contrib/sessions"\n       // 导入session存储引擎\n    "github.com/gin-contrib/sessions/cookie"\n        // 导入gin框架包\n    "github.com/gin-gonic/gin"\n)\n​\nfunc main() {\n    r := gin.Default()\n        // 创建基于cookie的存储引擎，secret11111 参数是用于加密的密钥\n    store := cookie.NewStore([]byte("secret11111"))\n        // 设置session中间件，参数mysession，指的是session的名字，也是cookie的名字\n       // store是前面创建的存储引擎，我们可以替换成其他存储引擎\n    r.Use(sessions.Sessions("mysession", store))\n​\n    r.GET("/hello", func(c *gin.Context) {\n                // 初始化session对象\n        session := sessions.Default(c)\n                \n                // 通过session.Get读取session值\n                // session是键值对格式数据，因此需要通过key查询数据\n        if session.Get("hello") != "world" {\n                        // 设置session数据\n            session.Set("hello", "world")\n                        // 删除session数据\n                        session.Delete("tizi365")\n                        // 保存session数据\n            session.Save()\n                        // 删除整个session\n                        // session.Clear()\n        }\n                \n        c.JSON(200, gin.H{"hello": session.Get("hello")})\n    })\n    r.Run(":8000")\n}\n')])])]),t("h3",{attrs:{id:"_2-基于redis存储引擎的session"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-基于redis存储引擎的session"}},[n._v("#")]),n._v(" 2.基于redis存储引擎的session")]),n._v(" "),t("p",[n._v("如果我们想将session数据保存到redis中，只要将session的存储引擎改成redis即可。")]),n._v(" "),t("p",[n._v("使用redis作为存储引擎的例子：")]),n._v(" "),t("p",[n._v("首先安装redis存储引擎的包")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("go get github.com/gin-contrib/sessions/redis\n")])])]),t("p",[n._v("例子：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('package main\n\nimport (\n    "github.com/gin-contrib/sessions"\n    "github.com/gin-contrib/sessions/redis"\n    "github.com/gin-gonic/gin"\n)\n\nfunc main() {\n    r := gin.Default()\n    // 初始化基于redis的存储引擎\n    // 参数说明：\n    //    第1个参数 - redis最大的空闲连接数\n    //    第2个参数 - 数通信协议tcp或者udp\n    //    第3个参数 - redis地址, 格式，host:port\n    //    第4个参数 - redis密码\n    //    第5个参数 - session加密密钥\n    store, _ := redis.NewStore(10, "tcp", "localhost:6379", "", []byte("secret"))\n    r.Use(sessions.Sessions("mysession", store))\n\n    r.GET("/incr", func(c *gin.Context) {\n        session := sessions.Default(c)\n        var count int\n        v := session.Get("count")\n        if v == nil {\n            count = 0\n        } else {\n            count = v.(int)\n            count++\n        }\n        session.Set("count", count)\n        session.Save()\n        c.JSON(200, gin.H{"count": count})\n    })\n    r.Run(":8000")\n}\n')])])])])}),[],!1,null,null,null);t.default=a.exports}}]);