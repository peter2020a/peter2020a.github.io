(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{296:function(n,r,e){"use strict";e.r(r);var t=e(13),a=Object(t.a)({},(function(){var n=this,r=n._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"golang操作redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#golang操作redis"}},[n._v("#")]),n._v(" Golang操作Redis")]),n._v(" "),r("h2",{attrs:{id:"_1、安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、安装"}},[n._v("#")]),n._v(" 1、安装")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v("go get github.com/garyburd/redigo/redis\n")])])]),r("h2",{attrs:{id:"_2、连接redis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、连接redis"}},[n._v("#")]),n._v(" 2、连接redis")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('package main\n\nimport (\n    "fmt"\n    "github.com/garyburd/redigo/redis"\n)\nfunc main(){\n    c,err:=redis.Dial("tcp","127.0.0.1:6379")\n    if err!=nil{\n        fmt.Println("conn redis failed,",err)\n        return\n    }\n    //fmt.Println("连接成功",c)\n    defer c.Close()\n}\n')])])]),r("h2",{attrs:{id:"_3、set-get-设置键值-取得键值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、set-get-设置键值-取得键值"}},[n._v("#")]),n._v(" 3、set，get，设置键值，取得键值")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('package main\n\nimport (\n    "fmt"\n    "github.com/garyburd/redigo/redis"\n)\n\nfunc main() {\n    //p是指针类型int\n    var p *int\n    var a int\n    p = &a //p变量是个指针，指向a的内存地址\n    *p = 0\n    c, err := redis.Dial("tcp", "localhost:6379")\n    if err != nil {\n        //错误处理\n        fmt.Println("conn redis failed,", err)\n        return\n    }\n    defer c.Close()\n    //设置值\n    _, err = c.Do("Set", "abc", 100)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    //从redis取值，取int类型的值\n    r, err := redis.Int(c.Do("Get", "abc"))\n    if err != nil {\n        fmt.Println("get abc failed,", err)\n        return\n    }\n    fmt.Println(r)\n    //从redis取值，取name，string类型的值\n    r1, err := redis.String(c.Do("Get", "name"))\n    if err != nil {\n        fmt.Println("get abc failed,", err)\n        return\n    }\n    fmt.Println(r1)\n\n}\n')])])]),r("h2",{attrs:{id:"_4、hash表设置键值-取键值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、hash表设置键值-取键值"}},[n._v("#")]),n._v(" 4、hash表设置键值，取键值")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('package main\n\nimport (\n    "fmt"\n    "github.com/garyburd/redigo/redis"\n)\n\nfunc main() {\n    c, err := redis.Dial("tcp", "127.0.0.1:6379")\n    if err != nil {\n        fmt.Println("conn redis failed,", err)\n        return\n    }\n    defer c.Close()\n    //设置hash\n    _, err = c.Do("HSet", "books", "abc", 100)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    //取得hash\n    r, err := redis.Int(c.Do("HGet", "books", "abc"))\n    if err != nil {\n        fmt.Println("get abc failed,", err)\n        return\n    }\n    fmt.Println(r)\n\n\n}\n')])])]),r("h2",{attrs:{id:"_5、批量set键值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、批量set键值"}},[n._v("#")]),n._v(" 5、批量set键值")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('package main\n\nimport (\n    "fmt"\n    "github.com/garyburd/redigo/redis"\n)\n\nfunc main() {\n    //建立连接\n    c, err := redis.Dial("tcp", "127.0.0.1:6379")\n    if err != nil {\n        fmt.Println("conn redis failed,", err)\n        return\n    }\n    defer c.Close()\n    _, err = c.Do("MSet", "abc", 100, "efg", 300)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    r, err := redis.Ints(c.Do("MGet", "abc", "efg"))\n    if err != nil {\n        fmt.Println("get abc failed,", err)\n        return\n    }\n    for _, v := range r {\n        fmt.Println(v)\n    }\n}\n')])])]),r("h2",{attrs:{id:"_6、设置过期时间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、设置过期时间"}},[n._v("#")]),n._v(" 6、设置过期时间")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('package main\n\nimport (\n    "fmt"\n\n    "github.com/garyburd/redigo/redis"\n)\n\nfunc main() {\n    c, err := redis.Dial("tcp", "127.0.0.1:6379")\n    if err != nil {\n        fmt.Println("conn redis failed,", err)\n    }\n    defer c.Close()\n    _, err = c.Do("expire", "abc", 10)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n}\n')])])]),r("h2",{attrs:{id:"_7、list队列操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、list队列操作"}},[n._v("#")]),n._v(" 7、list队列操作")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('package main\n\nimport (\n    "fmt"\n    "github.com/garyburd/redigo/redis"\n)\n\nfunc main() {\n    c, err := redis.Dial("tcp", "127.0.0.1:6379")\n    if err != nil {\n        fmt.Println("conn redis failed,", err)\n        return\n    }\n    defer c.Close()\n    _, err = c.Do("lpush", "book_list", "abc", "efg", 300)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    r, err := redis.String(c.Do("lpop", "book_list"))\n    if err != nil {\n        fmt.Println("get abc failed,", err)\n        return\n    }\n    fmt.Println(r)\n}\n')])])]),r("h2",{attrs:{id:"_8、redis连接池pool"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、redis连接池pool"}},[n._v("#")]),n._v(" 8、redis连接池pool")]),n._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[n._v('package main\n\nimport (\n    "fmt"\n    "github.com/garyburd/redigo/redis"\n)\n\n//poll是指针\nvar pool *redis.Pool\n\n//初始化执行函数\nfunc init() {\n    pool = &redis.Pool{\n        MaxIdle:     16,\n        MaxActive:   0,\n        IdleTimeout: 300,\n        Dial: func() (redis.Conn, error) {\n            return redis.Dial("tcp", "127.0.0.1:6379")\n        },\n    }\n}\nfunc main() {\n    c := pool.Get()\n    defer c.Close()\n    _, err := c.Do("Set", "abc", 100)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    r, err := redis.Int(c.Do("Get", "abc"))\n    if err != nil {\n        fmt.Println("get abc failed,", err)\n        return\n    }\n    fmt.Println(r)\n    pool.Close()\n}\n')])])])])}),[],!1,null,null,null);r.default=a.exports}}]);