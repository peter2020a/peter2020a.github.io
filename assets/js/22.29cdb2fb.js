(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{292:function(a,s,r){"use strict";r.r(s);var e=r(13),t=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"gorm基本使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gorm基本使用"}},[a._v("#")]),a._v(" gorm基本使用")]),a._v(" "),s("h2",{attrs:{id:"gorm安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gorm安装"}},[a._v("#")]),a._v(" gorm安装")]),a._v(" "),s("p",[a._v("gorm框架是go的一个数据库连接及交互框架，一般用于连接关系型数据库。")]),a._v(" "),s("p",[a._v("安装gorm，使用命令安装：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("go get -u -v github.com/jinzhu/gorm\n")])])]),s("h2",{attrs:{id:"连接数据库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接数据库"}},[a._v("#")]),a._v(" 连接数据库")]),a._v(" "),s("p",[a._v("构建连接的目标为数据库中某一个库，同大多数框架一样使用url进行连接，url基本格式：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("用户名:密码@连接方式(ip:port)/数据库名?参数\n")])])]),s("h4",{attrs:{id:"格式解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#格式解释"}},[a._v("#")]),a._v(" 格式解释：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("用户名：连接数据库用户名\n\n密码：连接数据库密码\n\n连接方式：或称为访问协议，一般为tcp\n\nip：数据库所在服务器地址\n\nport：数据库监听端口\n\n数据库名：数据库中对应要连接库名\n\n参数：附加数据库参数，根据数据库不同内容不同\n")])])]),s("p",[a._v("确定url后，就可以调用gorm中参数进行连接数据库操作：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('//调用Open函数连接数据库，第一个参数为对应数据库名称，这里以mysql为例，mariadb也可以使用mysql作为名称。第二个参数为刚才设置好的url。\n\n//得到两个结果：第一个为连接后对象，用于操作数据库对象；第二个为错误信息，连接失败会返回内容，连接成功返回nil，空。\n\ndbConn, err := gorm.Open("mysql", "root:123456@tcp(127.0.0.1:3306)/test1?charset=utf8&parseTime=True&loc=Local")\n\nif err != nil {\n\n  panic(err)\n\n}\n')])])]),s("p",[a._v("别忘记import语句导入包：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// gorm包\n\n"github.com/jinzhu/gorm"\n\n//数据库方言，因为不会直接使用，所以前面要加下划线\n\n_ "github.com/jinzhu/gorm/dialects/mysql"\n    操作完数据库后不要忘了关闭连接：\n\ndbConn.Close()\n')])])]),s("h2",{attrs:{id:"表操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表操作"}},[a._v("#")]),a._v(" 表操作")]),a._v(" "),s("h3",{attrs:{id:"创建表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建表"}},[a._v("#")]),a._v(" 创建表")]),a._v(" "),s("p",[a._v("gorm创建表基于结构体，所以创建表前要先用结构体规划表结构，这里简单写一个结构体,创建表时默认结构体第一个字段作为主键：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("type User struct {\n\n  Id int\n\n  Name string\n\n  Data string\n\n}\n")])])]),s("p",[a._v("写好结构体后，调用创建表语句直接按照结构体结构创建表：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// 直接创建表\n\ndbConn.CreateTable(&User{})\n\n// 自定义表名创建表\n\ndbConn.Table("user").Create(&User{})\n')])])]),s("p",[a._v("当直接创建表时，表名遵循规范：")]),a._v(" "),s("p",[a._v("1、大写字母全部小写，所有位于中间的大写字母都变成小写字母并且前面加下划线，例如UserInfo结构体创建为表名称为user_infos。")]),a._v(" "),s("p",[a._v("2、上面最后的那个s是因为直接创建表时，名称最后都会加上一个s。所以上面结构体User创建表后名称为users。")]),a._v(" "),s("h3",{attrs:{id:"删除表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除表"}},[a._v("#")]),a._v(" 删除表")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// 按照结构体删除，即默认表名\ndbConn.DropTable(&User{})\n\n//按照表名删除，可为自定义的表名\ndbConn.DropTable("user")\n')])])]),s("h2",{attrs:{id:"增删改查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#增删改查"}},[a._v("#")]),a._v(" 增删改查")]),a._v(" "),s("h3",{attrs:{id:"插入数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入数据"}},[a._v("#")]),a._v(" 插入数据")]),a._v(" "),s("p",[a._v("插入数据,插入数据方法结构使用Create方法：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('// 默认表名插入数据\ndbConn.Create(&User{Id: 1, Name: "awda", Data: "ssss"})\n\n// 自定义表名插入数据\ndbConn.Table("user").Create(&User{Id: 1, Name: "awda", Data: "ssss"})\n')])])]),s("h3",{attrs:{id:"查询数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询数据"}},[a._v("#")]),a._v(" 查询数据")]),a._v(" "),s("p",[a._v("查询第一条找到的数据,使用First，该方法返回值仍然为db对象，所以接收数据时我们需要先定义一个对应表结构的结构体接收数据：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('//定义user的结构体对象\n\nvar user User\n\n// 还是两种操作方式\n\n//其中&user代表上面定义的结构体对象用于接收数据，使用时通过上面变量直接操作\n\n//默认查询的话相当于查询第一条数据\n\ndbConn.First(&user)\n\ndbConn.Table("user").First(&user)\n\n//输出内容\n\nfmt.Print(user.Id)\n\n//带条件查询\n\n//只传入一个参数时代表默认查询主键\n\ndbConn.First(&user, 1)\n\ndbConn.Table("user").First(&user, 1)\n\n//也可以指定查询条件，条件书写格式与普通sql语句并无不同，其中?代表占位符，First方法是动态参数方法，可以传入任意参数，将按照?占位符逐个传入。\n\ndbConn.First(&user, "name=? and id = ?", "awda", 1)\n\ndbConn.Table("user").First(&user, "name=? and id = ?", "awda", 1)\n')])])]),s("p",[a._v("有First就有Last，同First调用格式一致。")]),a._v(" "),s("p",[a._v("批量查询,批量查询使用Find方法，其余参数结构同First或Last相同，只不过传参时一般传入数组参数，当然，First或Last方法也可以传入数组参数，但得到的数组只有一个数据，批量查询操作：")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('//定义结构体数组接收批量数据\nvar user[] User\n\n//其余操作与之前相同，不再过度演示\ndbConn.Find(&user)\n\ndbConn.Table("user").Find(&user)\n')])])]),s("h3",{attrs:{id:"更新数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新数据"}},[a._v("#")]),a._v(" 更新数据")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('//根据Where语句更新\n//更新单个字段\ndbConn.Table("user").Where("id=?", 1).Update("id", 1234)\n\n//更新批量字段\ndbConn.Table("user").Where("id=?",2).Updates(&User{Id: 123, Name: "awdawd1231"})\n\n//按主键更新，传入结构体对象，根据对应主键更新相应内容\ndbConn.Table("user").Save(&user1)\n')])])]),s("h3",{attrs:{id:"删除内容"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除内容"}},[a._v("#")]),a._v(" 删除内容")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('//按照主键删除\ndbConn.Table("user").Delete(&user1)\n\n//指定条件删除,后面需要指定一个空指针，因为Delete方法必须有参数\ndbTable("user").Where(条件表达式).Delete(&User{})\n\n//传入空指针代表指定结构，按照默认表名去删除其中内容\ndb.Where(条件表达式).Delete(&User{})\n')])])]),s("h2",{attrs:{id:"联表查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#联表查询"}},[a._v("#")]),a._v(" 联表查询")]),a._v(" "),s("h3",{attrs:{id:"gorm实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gorm实现"}},[a._v("#")]),a._v(" gorm实现")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('\tdb.Model(&Worker{}).\n\t\tSelect("workers.csbh,workers.gzryxm,workers.gzrysjh,workers.gzrysfz").\n\t\tJoins("left join worker_records on workers.gzrysfz = worker_records.gzrsfz").\n\t\tWhere("worker_records.gzrsfz", nil).\n\t\tScan(&notClockedInPeopleAll)\n')])])]),s("h3",{attrs:{id:"mysql原生实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql原生实现"}},[a._v("#")]),a._v(" MySQL原生实现")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("SELECT w.gzryxm,w.gzrysjh,w.gzrysfz\nFROM workers w\nLEFT JOIN worker_records wr\nON w.gzrysfz = wr.gzrsfz\nWHERE wr.gzrsfz IS NULL\n")])])])])}),[],!1,null,null,null);s.default=t.exports}}]);